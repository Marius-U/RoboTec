
RoboTec.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000038  00800100  00000236  000002ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000236  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800138  00800138  00000302  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000302  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000f0  00000000  00000000  00000332  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000072a  00000000  00000000  00000422  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000404  00000000  00000000  00000b4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004f0  00000000  00000000  00000f50  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000018c  00000000  00000000  00001440  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000295  00000000  00000000  000015cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003cb  00000000  00000000  00001861  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  00001c2c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  1c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  68:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  6c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  70:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  74:	0c 94 e8 00 	jmp	0x1d0	; 0x1d0 <__vector_29>
  78:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  7c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  80:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  84:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  88:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  8c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  90:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  94:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  98:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  9c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	e6 e3       	ldi	r30, 0x36	; 54
  c0:	f2 e0       	ldi	r31, 0x02	; 2
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	a8 33       	cpi	r26, 0x38	; 56
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
  ce:	21 e0       	ldi	r18, 0x01	; 1
  d0:	a8 e3       	ldi	r26, 0x38	; 56
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	aa 33       	cpi	r26, 0x3A	; 58
  da:	b2 07       	cpc	r27, r18
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	0e 94 fe 00 	call	0x1fc	; 0x1fc <main>
  e2:	0c 94 19 01 	jmp	0x232	; 0x232 <_exit>

000000e6 <__bad_interrupt>:
  e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <ADC_interuptInit>:
		case SENSOR5 :
		{
			ADCSRB &= ~(1 << MUX5);
			ADMUX &= ~(1 << MUX4);
			ADMUX &= ~(1 << MUX3);
			ADMUX |= (1 << MUX2);
  ea:	ec e7       	ldi	r30, 0x7C	; 124
			ADMUX |= (1 << MUX1);
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	80 6c       	ori	r24, 0xC0	; 192
			ADMUX &= ~(1 << MUX0);
  f2:	80 83       	st	Z, r24
  f4:	ea e7       	ldi	r30, 0x7A	; 122
  f6:	f0 e0       	ldi	r31, 0x00	; 0
		}
		break;
  f8:	80 81       	ld	r24, Z
		case SENSOR6 :
		{
			ADCSRB |= (1 << MUX5);
  fa:	88 62       	ori	r24, 0x28	; 40
  fc:	80 83       	st	Z, r24
  fe:	ab e7       	ldi	r26, 0x7B	; 123
 100:	b0 e0       	ldi	r27, 0x00	; 0
 102:	8c 91       	ld	r24, X
			ADMUX &= ~(1 << MUX4);
 104:	80 68       	ori	r24, 0x80	; 128
 106:	8c 93       	st	X, r24
 108:	80 81       	ld	r24, Z
 10a:	80 68       	ori	r24, 0x80	; 128
 10c:	80 83       	st	Z, r24
			ADMUX &= ~(1 << MUX3);
 10e:	80 81       	ld	r24, Z
 110:	80 64       	ori	r24, 0x40	; 64
 112:	80 83       	st	Z, r24
			ADMUX &= ~(1 << MUX2);
 114:	08 95       	ret

00000116 <pwm_init>:
#include "/RoboTec/RoboTec/RoboTec/Driver/Headers/USART.h"

void pwm_init()
{
	//Set the direction pins as output for the motor driver.
	DDRB |= (1 << DDB4) | (1 << DDB7);
 116:	84 b1       	in	r24, 0x04	; 4
 118:	80 69       	ori	r24, 0x90	; 144
 11a:	84 b9       	out	0x04, r24	; 4
	DDRC |= (1 << DDC7);
 11c:	3f 9a       	sbi	0x07, 7	; 7
	DDRF |= (1 << DDF7);
 11e:	87 9a       	sbi	0x10, 7	; 16
	DDRB |= (1 << DDB5)|(1 << DDB6);//PWM pins
 120:	84 b1       	in	r24, 0x04	; 4
 122:	80 66       	ori	r24, 0x60	; 96
 124:	84 b9       	out	0x04, r24	; 4
	
	TCCR1A |= (1 << COM1A1) | (1 << COM1B1);
 126:	e0 e8       	ldi	r30, 0x80	; 128
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	80 81       	ld	r24, Z
 12c:	80 6a       	ori	r24, 0xA0	; 160
 12e:	80 83       	st	Z, r24
	TCCR1A |= (1 << WGM11);
 130:	80 81       	ld	r24, Z
 132:	82 60       	ori	r24, 0x02	; 2
 134:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM13) | (1 <<WGM12);
 136:	e1 e8       	ldi	r30, 0x81	; 129
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	80 81       	ld	r24, Z
 13c:	88 61       	ori	r24, 0x18	; 24
 13e:	80 83       	st	Z, r24
	TCCR1B |= (1 << CS10);
 140:	80 81       	ld	r24, Z
 142:	81 60       	ori	r24, 0x01	; 1
 144:	80 83       	st	Z, r24
	ICR1=0xFF;
 146:	8f ef       	ldi	r24, 0xFF	; 255
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	90 93 87 00 	sts	0x0087, r25
 14e:	80 93 86 00 	sts	0x0086, r24
	uart_print("PWM initialization finished!\r\n");
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	91 e0       	ldi	r25, 0x01	; 1
 156:	0e 94 b6 00 	call	0x16c	; 0x16c <uart_print>
 15a:	08 95       	ret

0000015c <uart_transmit>:

// transmit a char to uart
void uart_transmit( unsigned char data )
{
	// wait for empty transmit buffer
	while ( ! ( UCSR1A & ( 1 << UDRE1 ) ) )
 15c:	e8 ec       	ldi	r30, 0xC8	; 200
 15e:	f0 e0       	ldi	r31, 0x00	; 0
 160:	90 81       	ld	r25, Z
 162:	95 ff       	sbrs	r25, 5
 164:	fd cf       	rjmp	.-6      	; 0x160 <uart_transmit+0x4>
	;
	
	// put data into buffer, sends data
	UDR1 = data;
 166:	80 93 ce 00 	sts	0x00CE, r24
 16a:	08 95       	ret

0000016c <uart_print>:
}
// write a string to the uart
void uart_print( char data[] )
{
 16c:	0f 93       	push	r16
 16e:	1f 93       	push	r17
 170:	cf 93       	push	r28
 172:	df 93       	push	r29
	//cli();
	uint8_t count = 0;
	uint8_t length = strlen(data);
 174:	fc 01       	movw	r30, r24
 176:	01 90       	ld	r0, Z+
 178:	00 20       	and	r0, r0
 17a:	e9 f7       	brne	.-6      	; 0x176 <uart_print+0xa>
 17c:	31 97       	sbiw	r30, 0x01	; 1
 17e:	1e 2f       	mov	r17, r30
 180:	18 1b       	sub	r17, r24
	
	for ( count = 0; count < length; count++ )
 182:	51 f0       	breq	.+20     	; 0x198 <uart_print+0x2c>
 184:	08 2f       	mov	r16, r24
 186:	c0 2f       	mov	r28, r16
 188:	d9 2f       	mov	r29, r25
	uart_transmit(data[count]);
 18a:	89 91       	ld	r24, Y+
 18c:	0e 94 ae 00 	call	0x15c	; 0x15c <uart_transmit>
 190:	8c 2f       	mov	r24, r28
 192:	80 1b       	sub	r24, r16
{
	//cli();
	uint8_t count = 0;
	uint8_t length = strlen(data);
	
	for ( count = 0; count < length; count++ )
 194:	81 17       	cp	r24, r17
 196:	c8 f3       	brcs	.-14     	; 0x18a <uart_print+0x1e>
	uart_transmit(data[count]);
	
	uart_transmit('\r');
 198:	8d e0       	ldi	r24, 0x0D	; 13
 19a:	0e 94 ae 00 	call	0x15c	; 0x15c <uart_transmit>
	uart_transmit('\n');
 19e:	8a e0       	ldi	r24, 0x0A	; 10
 1a0:	0e 94 ae 00 	call	0x15c	; 0x15c <uart_transmit>
	//sei();
}
 1a4:	df 91       	pop	r29
 1a6:	cf 91       	pop	r28
 1a8:	1f 91       	pop	r17
 1aa:	0f 91       	pop	r16
 1ac:	08 95       	ret

000001ae <uart_init>:
void uart_init(void)
{
	// set baud rate
	unsigned int baud = 16u;//BAUD_PRESCALE;
	
	UBRR1H = (unsigned char) (baud >> 8 );
 1ae:	10 92 cd 00 	sts	0x00CD, r1
	UBRR1L = (unsigned char)baud;
 1b2:	80 e1       	ldi	r24, 0x10	; 16
 1b4:	80 93 cc 00 	sts	0x00CC, r24
	UCSR1A |= (1 << U2X1);
 1b8:	e8 ec       	ldi	r30, 0xC8	; 200
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
 1bc:	80 81       	ld	r24, Z
 1be:	82 60       	ori	r24, 0x02	; 2
 1c0:	80 83       	st	Z, r24
	
	// enable received and transmitter
	UCSR1B = ( 1 << RXEN1 ) | ( 1 << TXEN1 );
 1c2:	88 e1       	ldi	r24, 0x18	; 24
 1c4:	80 93 c9 00 	sts	0x00C9, r24
	
	// set frame format ( 8data, 1stop )
	UCSR1C = (1 << UCSZ10) | (1 << UCSZ11);
 1c8:	86 e0       	ldi	r24, 0x06	; 6
 1ca:	80 93 ca 00 	sts	0x00CA, r24
 1ce:	08 95       	ret

000001d0 <__vector_29>:
#include "/RoboTec/RoboTec/RoboTec/Driver/Headers/USART.h"
#include <avr/interrupt.h>


ISR (ADC_vect)
{
 1d0:	1f 92       	push	r1
 1d2:	0f 92       	push	r0
 1d4:	0f b6       	in	r0, 0x3f	; 63
 1d6:	0f 92       	push	r0
 1d8:	11 24       	eor	r1, r1
 1da:	8f 93       	push	r24
 1dc:	9f 93       	push	r25
	adc_value = ADC;
 1de:	80 91 78 00 	lds	r24, 0x0078
 1e2:	90 91 79 00 	lds	r25, 0x0079
 1e6:	90 93 39 01 	sts	0x0139, r25
 1ea:	80 93 38 01 	sts	0x0138, r24
}
 1ee:	9f 91       	pop	r25
 1f0:	8f 91       	pop	r24
 1f2:	0f 90       	pop	r0
 1f4:	0f be       	out	0x3f, r0	; 63
 1f6:	0f 90       	pop	r0
 1f8:	1f 90       	pop	r1
 1fa:	18 95       	reti

000001fc <main>:
{
	uint8_t aux;
	uint8_t state;
	
	
	DIDR0 |= (1 << ADC0D) | (1 << ADC1D) | (1 << ADC4D) | (1 << ADC5D) | (1 << ADC6D);
 1fc:	ee e7       	ldi	r30, 0x7E	; 126
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	80 81       	ld	r24, Z
 202:	83 67       	ori	r24, 0x73	; 115
 204:	80 83       	st	Z, r24
	DIDR2 |= (1 << ADC8D) | (1 << ADC9D) | (1 << ADC10D); 
 206:	ed e7       	ldi	r30, 0x7D	; 125
 208:	f0 e0       	ldi	r31, 0x00	; 0
 20a:	80 81       	ld	r24, Z
 20c:	87 60       	ori	r24, 0x07	; 7
 20e:	80 83       	st	Z, r24
	
	DDRB |= (1<<DDB5) | (1<<DDB6) | (1 << DDB7) | (1 << DDB4);         //OCR1A and OCR1B...
 210:	84 b1       	in	r24, 0x04	; 4
 212:	80 6f       	ori	r24, 0xF0	; 240
 214:	84 b9       	out	0x04, r24	; 4
	DDRC |= (1 << DDC7);
 216:	3f 9a       	sbi	0x07, 7	; 7
	DDRF |= (1 << DDF7);
 218:	87 9a       	sbi	0x10, 7	; 16

	
	uart_init();                           //USART init
 21a:	0e 94 d7 00 	call	0x1ae	; 0x1ae <uart_init>
	ADC_interuptInit();					   //ADC init
 21e:	0e 94 75 00 	call	0xea	; 0xea <ADC_interuptInit>
	pwm_init();                            //PWM init
 222:	0e 94 8b 00 	call	0x116	; 0x116 <pwm_init>
	
	
	uart_print("Initialisation finished.");
 226:	8f e1       	ldi	r24, 0x1F	; 31
 228:	91 e0       	ldi	r25, 0x01	; 1
 22a:	0e 94 b6 00 	call	0x16c	; 0x16c <uart_print>
	sei();
 22e:	78 94       	sei
 230:	ff cf       	rjmp	.-2      	; 0x230 <main+0x34>

00000232 <_exit>:
 232:	f8 94       	cli

00000234 <__stop_program>:
 234:	ff cf       	rjmp	.-2      	; 0x234 <__stop_program>
