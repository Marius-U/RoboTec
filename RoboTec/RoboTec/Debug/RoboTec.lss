
RoboTec.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  000003c8  0000045c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800118  00800118  00000474  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000474  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000e0  00000000  00000000  000004a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006d1  00000000  00000000  00000584  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000395  00000000  00000000  00000c55  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000040f  00000000  00000000  00000fea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000188  00000000  00000000  000013fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000261  00000000  00000000  00001584  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002f1  00000000  00000000  000017e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  00001ad6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  1c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  68:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  6c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  70:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  74:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__vector_29>
  78:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  7c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  80:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  84:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  88:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  8c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  90:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  94:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  98:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  9c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	e8 ec       	ldi	r30, 0xC8	; 200
  c0:	f3 e0       	ldi	r31, 0x03	; 3
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	a8 31       	cpi	r26, 0x18	; 24
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
  ce:	21 e0       	ldi	r18, 0x01	; 1
  d0:	a8 e1       	ldi	r26, 0x18	; 24
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	ab 31       	cpi	r26, 0x1B	; 27
  da:	b2 07       	cpc	r27, r18
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	0e 94 c3 01 	call	0x386	; 0x386 <main>
  e2:	0c 94 e2 01 	jmp	0x3c4	; 0x3c4 <_exit>

000000e6 <__bad_interrupt>:
  e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <ADC_interuptInit>:

}

void ADC_interuptInit()
{
		ADMUX |= (1 << REFS0) | (1 << REFS1); //Foloseste referinta
  ea:	ec e7       	ldi	r30, 0x7C	; 124
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	80 6c       	ori	r24, 0xC0	; 192
  f2:	80 83       	st	Z, r24
		ADCSRA |=  (1<<ADATE) | (1<<ADIE) ; //Prescaler pentru 16Mhz //(1 << ADPS2) | (1 << ADPS1) | (1<<ADPS0) |
  f4:	ea e7       	ldi	r30, 0x7A	; 122
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	88 62       	ori	r24, 0x28	; 40
  fc:	80 83       	st	Z, r24
		//ACSR |= (1 << ACD);    //Analog Comparator is switched off when ACD is set.
		ADCSRB |= (1<<ADHSM);
  fe:	ab e7       	ldi	r26, 0x7B	; 123
 100:	b0 e0       	ldi	r27, 0x00	; 0
 102:	8c 91       	ld	r24, X
 104:	80 68       	ori	r24, 0x80	; 128
 106:	8c 93       	st	X, r24
		ADCSRA |= (1<<ADEN);
 108:	80 81       	ld	r24, Z
 10a:	80 68       	ori	r24, 0x80	; 128
 10c:	80 83       	st	Z, r24
		ADCSRA |= (1 << ADSC); //Start the ADC conversion
 10e:	80 81       	ld	r24, Z
 110:	80 64       	ori	r24, 0x40	; 64
 112:	80 83       	st	Z, r24
 114:	08 95       	ret

00000116 <ADC_setADMUX>:
}

void ADC_setADMUX(uint8_t channel)
{
	ADMUX &= 0xF0;
 116:	ec e7       	ldi	r30, 0x7C	; 124
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	90 81       	ld	r25, Z
 11c:	90 7f       	andi	r25, 0xF0	; 240
 11e:	90 83       	st	Z, r25
	ADMUX |= channel; 
 120:	90 81       	ld	r25, Z
 122:	89 2b       	or	r24, r25
 124:	80 83       	st	Z, r24
 126:	08 95       	ret

00000128 <uart_transmit>:

// transmit a char to uart
void uart_transmit( unsigned char data )
{
	// wait for empty transmit buffer
	while ( ! ( UCSR1A & ( 1 << UDRE1 ) ) )
 128:	e8 ec       	ldi	r30, 0xC8	; 200
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	90 81       	ld	r25, Z
 12e:	95 ff       	sbrs	r25, 5
 130:	fd cf       	rjmp	.-6      	; 0x12c <uart_transmit+0x4>
	;
	
	// put data into buffer, sends data
	UDR1 = data;
 132:	80 93 ce 00 	sts	0x00CE, r24
 136:	08 95       	ret

00000138 <uart_print>:
}
// write a string to the uart
void uart_print( char data[] )
{
 138:	0f 93       	push	r16
 13a:	1f 93       	push	r17
 13c:	cf 93       	push	r28
 13e:	df 93       	push	r29
	//cli();
	uint8_t count = 0;
	uint8_t length = strlen(data);
 140:	fc 01       	movw	r30, r24
 142:	01 90       	ld	r0, Z+
 144:	00 20       	and	r0, r0
 146:	e9 f7       	brne	.-6      	; 0x142 <uart_print+0xa>
 148:	31 97       	sbiw	r30, 0x01	; 1
 14a:	1e 2f       	mov	r17, r30
 14c:	18 1b       	sub	r17, r24
	
	for ( count = 0; count < length; count++ )
 14e:	51 f0       	breq	.+20     	; 0x164 <uart_print+0x2c>
 150:	08 2f       	mov	r16, r24
 152:	c0 2f       	mov	r28, r16
 154:	d9 2f       	mov	r29, r25
	uart_transmit(data[count]);
 156:	89 91       	ld	r24, Y+
 158:	0e 94 94 00 	call	0x128	; 0x128 <uart_transmit>
 15c:	8c 2f       	mov	r24, r28
 15e:	80 1b       	sub	r24, r16
{
	//cli();
	uint8_t count = 0;
	uint8_t length = strlen(data);
	
	for ( count = 0; count < length; count++ )
 160:	81 17       	cp	r24, r17
 162:	c8 f3       	brcs	.-14     	; 0x156 <uart_print+0x1e>
	uart_transmit(data[count]);
	
	uart_transmit('\r');
 164:	8d e0       	ldi	r24, 0x0D	; 13
 166:	0e 94 94 00 	call	0x128	; 0x128 <uart_transmit>
	uart_transmit('\n');
 16a:	8a e0       	ldi	r24, 0x0A	; 10
 16c:	0e 94 94 00 	call	0x128	; 0x128 <uart_transmit>
	//sei();
}
 170:	df 91       	pop	r29
 172:	cf 91       	pop	r28
 174:	1f 91       	pop	r17
 176:	0f 91       	pop	r16
 178:	08 95       	ret

0000017a <uart_int_transmit>:
void uart_int_transmit(uint16_t data)
{
 17a:	1f 93       	push	r17
 17c:	cf 93       	push	r28
 17e:	df 93       	push	r29
 180:	ac 01       	movw	r20, r24
		//a[i] = temp;
		//data = data / 10;
	//}
	//uart_print(a);
	//
	uint8_t d1 = (data%10)+48;
 182:	9c 01       	movw	r18, r24
 184:	ad ec       	ldi	r26, 0xCD	; 205
 186:	bc ec       	ldi	r27, 0xCC	; 204
 188:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <__umulhisi3>
 18c:	96 95       	lsr	r25
 18e:	87 95       	ror	r24
 190:	96 95       	lsr	r25
 192:	87 95       	ror	r24
 194:	96 95       	lsr	r25
 196:	87 95       	ror	r24
 198:	9c 01       	movw	r18, r24
 19a:	22 0f       	add	r18, r18
 19c:	33 1f       	adc	r19, r19
 19e:	88 0f       	add	r24, r24
 1a0:	99 1f       	adc	r25, r25
 1a2:	88 0f       	add	r24, r24
 1a4:	99 1f       	adc	r25, r25
 1a6:	88 0f       	add	r24, r24
 1a8:	99 1f       	adc	r25, r25
 1aa:	82 0f       	add	r24, r18
 1ac:	93 1f       	adc	r25, r19
 1ae:	ea 01       	movw	r28, r20
 1b0:	c8 1b       	sub	r28, r24
 1b2:	d9 0b       	sbc	r29, r25
 1b4:	c0 5d       	subi	r28, 0xD0	; 208
	data = data / 10;
 1b6:	9a 01       	movw	r18, r20
 1b8:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <__umulhisi3>
 1bc:	ac 01       	movw	r20, r24
 1be:	56 95       	lsr	r21
 1c0:	47 95       	ror	r20
 1c2:	56 95       	lsr	r21
 1c4:	47 95       	ror	r20
 1c6:	56 95       	lsr	r21
 1c8:	47 95       	ror	r20
	
	uint8_t d2 = (data%10)+48;
 1ca:	9a 01       	movw	r18, r20
 1cc:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <__umulhisi3>
 1d0:	9c 01       	movw	r18, r24
 1d2:	36 95       	lsr	r19
 1d4:	27 95       	ror	r18
 1d6:	36 95       	lsr	r19
 1d8:	27 95       	ror	r18
 1da:	36 95       	lsr	r19
 1dc:	27 95       	ror	r18
 1de:	c9 01       	movw	r24, r18
 1e0:	88 0f       	add	r24, r24
 1e2:	99 1f       	adc	r25, r25
 1e4:	22 0f       	add	r18, r18
 1e6:	33 1f       	adc	r19, r19
 1e8:	22 0f       	add	r18, r18
 1ea:	33 1f       	adc	r19, r19
 1ec:	22 0f       	add	r18, r18
 1ee:	33 1f       	adc	r19, r19
 1f0:	28 0f       	add	r18, r24
 1f2:	39 1f       	adc	r19, r25
 1f4:	ca 01       	movw	r24, r20
 1f6:	82 1b       	sub	r24, r18
 1f8:	93 0b       	sbc	r25, r19
 1fa:	d0 e3       	ldi	r29, 0x30	; 48
 1fc:	d8 0f       	add	r29, r24
	data = data / 10;
 1fe:	9a 01       	movw	r18, r20
 200:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <__umulhisi3>
 204:	ac 01       	movw	r20, r24
 206:	56 95       	lsr	r21
 208:	47 95       	ror	r20
 20a:	56 95       	lsr	r21
 20c:	47 95       	ror	r20
 20e:	56 95       	lsr	r21
 210:	47 95       	ror	r20
	
	uint8_t d3 = (data%10)+48;
 212:	9a 01       	movw	r18, r20
 214:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <__umulhisi3>
 218:	9c 01       	movw	r18, r24
 21a:	36 95       	lsr	r19
 21c:	27 95       	ror	r18
 21e:	36 95       	lsr	r19
 220:	27 95       	ror	r18
 222:	36 95       	lsr	r19
 224:	27 95       	ror	r18
 226:	c9 01       	movw	r24, r18
 228:	88 0f       	add	r24, r24
 22a:	99 1f       	adc	r25, r25
 22c:	22 0f       	add	r18, r18
 22e:	33 1f       	adc	r19, r19
 230:	22 0f       	add	r18, r18
 232:	33 1f       	adc	r19, r19
 234:	22 0f       	add	r18, r18
 236:	33 1f       	adc	r19, r19
 238:	28 0f       	add	r18, r24
 23a:	39 1f       	adc	r19, r25
 23c:	ca 01       	movw	r24, r20
 23e:	82 1b       	sub	r24, r18
 240:	93 0b       	sbc	r25, r19
 242:	10 e3       	ldi	r17, 0x30	; 48
 244:	18 0f       	add	r17, r24
	data = data / 10;
 246:	9a 01       	movw	r18, r20
 248:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <__umulhisi3>
 24c:	ac 01       	movw	r20, r24
 24e:	56 95       	lsr	r21
 250:	47 95       	ror	r20
 252:	56 95       	lsr	r21
 254:	47 95       	ror	r20
 256:	56 95       	lsr	r21
 258:	47 95       	ror	r20
	
	uint8_t d4 = (data%10)+48;
 25a:	9a 01       	movw	r18, r20
 25c:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <__umulhisi3>
 260:	96 95       	lsr	r25
 262:	87 95       	ror	r24
 264:	96 95       	lsr	r25
 266:	87 95       	ror	r24
 268:	96 95       	lsr	r25
 26a:	87 95       	ror	r24
 26c:	bc 01       	movw	r22, r24
 26e:	66 0f       	add	r22, r22
 270:	77 1f       	adc	r23, r23
 272:	9c 01       	movw	r18, r24
 274:	22 0f       	add	r18, r18
 276:	33 1f       	adc	r19, r19
 278:	22 0f       	add	r18, r18
 27a:	33 1f       	adc	r19, r19
 27c:	22 0f       	add	r18, r18
 27e:	33 1f       	adc	r19, r19
 280:	26 0f       	add	r18, r22
 282:	37 1f       	adc	r19, r23
 284:	42 1b       	sub	r20, r18
 286:	53 0b       	sbc	r21, r19
 288:	80 e3       	ldi	r24, 0x30	; 48
 28a:	84 0f       	add	r24, r20
	data = data / 10;
	
	if( d4 != 48)
 28c:	80 33       	cpi	r24, 0x30	; 48
 28e:	11 f0       	breq	.+4      	; 0x294 <uart_int_transmit+0x11a>
	{
		uart_transmit(d4);
 290:	0e 94 94 00 	call	0x128	; 0x128 <uart_transmit>
	}
	if( d3 != 48)
 294:	10 33       	cpi	r17, 0x30	; 48
 296:	19 f0       	breq	.+6      	; 0x29e <uart_int_transmit+0x124>
	{
		uart_transmit(d3);
 298:	81 2f       	mov	r24, r17
 29a:	0e 94 94 00 	call	0x128	; 0x128 <uart_transmit>
	}
	if( d2 != 48)
 29e:	d0 33       	cpi	r29, 0x30	; 48
 2a0:	19 f0       	breq	.+6      	; 0x2a8 <uart_int_transmit+0x12e>
	{
		uart_transmit(d2);
 2a2:	8d 2f       	mov	r24, r29
 2a4:	0e 94 94 00 	call	0x128	; 0x128 <uart_transmit>
	}
	if( d1 != 48)
 2a8:	c0 33       	cpi	r28, 0x30	; 48
 2aa:	19 f0       	breq	.+6      	; 0x2b2 <uart_int_transmit+0x138>
	{
		uart_transmit(d1);
 2ac:	8c 2f       	mov	r24, r28
 2ae:	0e 94 94 00 	call	0x128	; 0x128 <uart_transmit>
	}
	
	uart_transmit('\r');
 2b2:	8d e0       	ldi	r24, 0x0D	; 13
 2b4:	0e 94 94 00 	call	0x128	; 0x128 <uart_transmit>
	uart_transmit('\n');
 2b8:	8a e0       	ldi	r24, 0x0A	; 10
 2ba:	0e 94 94 00 	call	0x128	; 0x128 <uart_transmit>
	
}
 2be:	df 91       	pop	r29
 2c0:	cf 91       	pop	r28
 2c2:	1f 91       	pop	r17
 2c4:	08 95       	ret

000002c6 <uart_init>:
void uart_init(void)
{
	// set baud rate
	unsigned int baud = 16u;//BAUD_PRESCALE;
	
	UBRR1H = (unsigned char) (baud >> 8 );
 2c6:	10 92 cd 00 	sts	0x00CD, r1
	UBRR1L = (unsigned char)baud;
 2ca:	80 e1       	ldi	r24, 0x10	; 16
 2cc:	80 93 cc 00 	sts	0x00CC, r24
	UCSR1A |= (1 << U2X1);
 2d0:	e8 ec       	ldi	r30, 0xC8	; 200
 2d2:	f0 e0       	ldi	r31, 0x00	; 0
 2d4:	80 81       	ld	r24, Z
 2d6:	82 60       	ori	r24, 0x02	; 2
 2d8:	80 83       	st	Z, r24
	
	// enable received and transmitter
	UCSR1B = ( 1 << RXEN1 ) | ( 1 << TXEN1 );
 2da:	88 e1       	ldi	r24, 0x18	; 24
 2dc:	80 93 c9 00 	sts	0x00C9, r24
	
	// set frame format ( 8data, 1stop )
	UCSR1C = (1 << UCSZ10) | (1 << UCSZ11);
 2e0:	86 e0       	ldi	r24, 0x06	; 6
 2e2:	80 93 ca 00 	sts	0x00CA, r24
 2e6:	08 95       	ret

000002e8 <__vector_29>:
#include "/RoboTec/RoboTec/RoboTec/Headers/main.h"
#include "/RoboTec/RoboTec/RoboTec/Driver/Headers/USART.h"
#include <avr/interrupt.h>

ISR (ADC_vect)
{
 2e8:	1f 92       	push	r1
 2ea:	0f 92       	push	r0
 2ec:	0f b6       	in	r0, 0x3f	; 63
 2ee:	0f 92       	push	r0
 2f0:	11 24       	eor	r1, r1
 2f2:	8f 93       	push	r24
 2f4:	9f 93       	push	r25
	//cli();
	adc_value = ADC;
 2f6:	80 91 78 00 	lds	r24, 0x0078
 2fa:	90 91 79 00 	lds	r25, 0x0079
 2fe:	90 93 19 01 	sts	0x0119, r25
 302:	80 93 18 01 	sts	0x0118, r24
	//uart_print("ADC value");
	
	//sei();
}
 306:	9f 91       	pop	r25
 308:	8f 91       	pop	r24
 30a:	0f 90       	pop	r0
 30c:	0f be       	out	0x3f, r0	; 63
 30e:	0f 90       	pop	r0
 310:	1f 90       	pop	r1
 312:	18 95       	reti

00000314 <CheckSensor>:
char CheckSensor()
{
	uint8_t state = 0;
	

	while(adc_value < TRESHOLD)
 314:	2f c0       	rjmp	.+94     	; 0x374 <CheckSensor+0x60>
	{
		uart_transmit('A');
 316:	81 e4       	ldi	r24, 0x41	; 65
 318:	0e 94 94 00 	call	0x128	; 0x128 <uart_transmit>
		uart_transmit(':');
 31c:	8a e3       	ldi	r24, 0x3A	; 58
 31e:	0e 94 94 00 	call	0x128	; 0x128 <uart_transmit>
		uart_int_transmit(adc_value);
 322:	80 91 18 01 	lds	r24, 0x0118
 326:	90 91 19 01 	lds	r25, 0x0119
 32a:	0e 94 bd 00 	call	0x17a	; 0x17a <uart_int_transmit>
		uart_transmit('C');
 32e:	83 e4       	ldi	r24, 0x43	; 67
 330:	0e 94 94 00 	call	0x128	; 0x128 <uart_transmit>
		uart_transmit(':');
 334:	8a e3       	ldi	r24, 0x3A	; 58
 336:	0e 94 94 00 	call	0x128	; 0x128 <uart_transmit>
		uart_transmit(channel+48);
 33a:	80 91 1a 01 	lds	r24, 0x011A
 33e:	80 5d       	subi	r24, 0xD0	; 208
 340:	0e 94 94 00 	call	0x128	; 0x128 <uart_transmit>
		uart_transmit('\r');
 344:	8d e0       	ldi	r24, 0x0D	; 13
 346:	0e 94 94 00 	call	0x128	; 0x128 <uart_transmit>
		uart_transmit('\n');
 34a:	8a e0       	ldi	r24, 0x0A	; 10
 34c:	0e 94 94 00 	call	0x128	; 0x128 <uart_transmit>
			
		if(channel >= 8)
 350:	80 91 1a 01 	lds	r24, 0x011A
 354:	88 30       	cpi	r24, 0x08	; 8
 356:	18 f0       	brcs	.+6      	; 0x35e <CheckSensor+0x4a>
		{
			channel = 0;
 358:	10 92 1a 01 	sts	0x011A, r1
 35c:	0b c0       	rjmp	.+22     	; 0x374 <CheckSensor+0x60>
		}
		else
		{
			cli();
 35e:	f8 94       	cli
			ADC_setADMUX(channel);
 360:	80 91 1a 01 	lds	r24, 0x011A
 364:	0e 94 8b 00 	call	0x116	; 0x116 <ADC_setADMUX>
			channel += 1;
 368:	80 91 1a 01 	lds	r24, 0x011A
 36c:	8f 5f       	subi	r24, 0xFF	; 255
 36e:	80 93 1a 01 	sts	0x011A, r24
			sei();
 372:	78 94       	sei
char CheckSensor()
{
	uint8_t state = 0;
	

	while(adc_value < TRESHOLD)
 374:	80 91 18 01 	lds	r24, 0x0118
 378:	90 91 19 01 	lds	r25, 0x0119
 37c:	84 3f       	cpi	r24, 0xF4	; 244
 37e:	91 40       	sbci	r25, 0x01	; 1
 380:	50 f2       	brcs	.-108    	; 0x316 <CheckSensor+0x2>
		}
		
	}

	return state;
}
 382:	80 e0       	ldi	r24, 0x00	; 0
 384:	08 95       	ret

00000386 <main>:

int main(void)
{
	uint8_t aux;
	//cli();
	uart_init();
 386:	0e 94 63 01 	call	0x2c6	; 0x2c6 <uart_init>
	ADC_interuptInit();
 38a:	0e 94 75 00 	call	0xea	; 0xea <ADC_interuptInit>
	ADC_setADMUX(channel);
 38e:	80 91 1a 01 	lds	r24, 0x011A
 392:	0e 94 8b 00 	call	0x116	; 0x116 <ADC_setADMUX>
	uart_print("Initialisation finished");
 396:	80 e0       	ldi	r24, 0x00	; 0
 398:	91 e0       	ldi	r25, 0x01	; 1
 39a:	0e 94 9c 00 	call	0x138	; 0x138 <uart_print>
	sei();
 39e:	78 94       	sei
	
    while(1)
    {

		
			aux = CheckSensor();
 3a0:	0e 94 8a 01 	call	0x314	; 0x314 <CheckSensor>
 3a4:	fd cf       	rjmp	.-6      	; 0x3a0 <main+0x1a>

000003a6 <__umulhisi3>:
 3a6:	a2 9f       	mul	r26, r18
 3a8:	b0 01       	movw	r22, r0
 3aa:	b3 9f       	mul	r27, r19
 3ac:	c0 01       	movw	r24, r0
 3ae:	a3 9f       	mul	r26, r19
 3b0:	70 0d       	add	r23, r0
 3b2:	81 1d       	adc	r24, r1
 3b4:	11 24       	eor	r1, r1
 3b6:	91 1d       	adc	r25, r1
 3b8:	b2 9f       	mul	r27, r18
 3ba:	70 0d       	add	r23, r0
 3bc:	81 1d       	adc	r24, r1
 3be:	11 24       	eor	r1, r1
 3c0:	91 1d       	adc	r25, r1
 3c2:	08 95       	ret

000003c4 <_exit>:
 3c4:	f8 94       	cli

000003c6 <__stop_program>:
 3c6:	ff cf       	rjmp	.-2      	; 0x3c6 <__stop_program>
