
RoboTec.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003c  00800100  00000944  000009d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000944  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  0080013c  0080013c  00000a14  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a14  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000130  00000000  00000000  00000a44  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c07  00000000  00000000  00000b74  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005a7  00000000  00000000  0000177b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006b6  00000000  00000000  00001d22  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000238  00000000  00000000  000023d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000036b  00000000  00000000  00002610  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a62  00000000  00000000  0000297b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d0  00000000  00000000  000033dd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <__ctors_end>
   4:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <__bad_interrupt>
   8:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <__bad_interrupt>
   c:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <__bad_interrupt>
  10:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <__bad_interrupt>
  14:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <__bad_interrupt>
  18:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <__bad_interrupt>
  1c:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <__bad_interrupt>
  20:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <__bad_interrupt>
  24:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <__bad_interrupt>
  28:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <__bad_interrupt>
  2c:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <__bad_interrupt>
  30:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <__bad_interrupt>
  34:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <__bad_interrupt>
  38:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <__bad_interrupt>
  3c:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <__bad_interrupt>
  40:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <__bad_interrupt>
  44:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <__bad_interrupt>
  48:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <__bad_interrupt>
  4c:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <__bad_interrupt>
  50:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <__bad_interrupt>
  54:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <__bad_interrupt>
  58:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <__bad_interrupt>
  5c:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <__bad_interrupt>
  60:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <__bad_interrupt>
  64:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <__bad_interrupt>
  68:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <__bad_interrupt>
  6c:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <__bad_interrupt>
  70:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <__bad_interrupt>
  74:	0c 94 42 04 	jmp	0x884	; 0x884 <__vector_29>
  78:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <__bad_interrupt>
  7c:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <__bad_interrupt>
  80:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <__bad_interrupt>
  84:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <__bad_interrupt>
  88:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <__bad_interrupt>
  8c:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <__bad_interrupt>
  90:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <__bad_interrupt>
  94:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <__bad_interrupt>
  98:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <__bad_interrupt>
  9c:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <__bad_interrupt>
  a0:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <__bad_interrupt>
  a4:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <__bad_interrupt>
  a8:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <__bad_interrupt>
  ac:	f5 01       	movw	r30, r10
  ae:	7e 03       	fmul	r23, r22
  b0:	41 04       	cpc	r4, r1
  b2:	24 03       	mulsu	r18, r20
  b4:	41 04       	cpc	r4, r1
  b6:	41 04       	cpc	r4, r1
  b8:	f7 02       	muls	r31, r23
  ba:	bf 03       	fmulsu	r19, r23
  bc:	41 04       	cpc	r4, r1
  be:	41 04       	cpc	r4, r1
  c0:	41 04       	cpc	r4, r1
  c2:	41 04       	cpc	r4, r1
  c4:	ca 02       	muls	r28, r26
  c6:	41 04       	cpc	r4, r1
  c8:	bb 03       	fmulsu	r19, r19
  ca:	dc 03       	fmulsu	r21, r20
  cc:	41 04       	cpc	r4, r1
  ce:	41 04       	cpc	r4, r1
  d0:	41 04       	cpc	r4, r1
  d2:	41 04       	cpc	r4, r1
  d4:	41 04       	cpc	r4, r1
  d6:	41 04       	cpc	r4, r1
  d8:	41 04       	cpc	r4, r1
  da:	41 04       	cpc	r4, r1
  dc:	18 02       	muls	r17, r24
  de:	cd 03       	fmulsu	r20, r21
  e0:	41 04       	cpc	r4, r1
  e2:	f6 03       	fmuls	r23, r22
  e4:	b7 03       	fmuls	r19, r23
  e6:	41 04       	cpc	r4, r1
  e8:	41 04       	cpc	r4, r1
  ea:	05 04       	cpc	r0, r5
  ec:	41 04       	cpc	r4, r1
  ee:	41 04       	cpc	r4, r1
  f0:	41 04       	cpc	r4, r1
  f2:	41 04       	cpc	r4, r1
  f4:	41 04       	cpc	r4, r1
  f6:	41 04       	cpc	r4, r1
  f8:	41 04       	cpc	r4, r1
  fa:	41 04       	cpc	r4, r1
  fc:	41 04       	cpc	r4, r1
  fe:	41 04       	cpc	r4, r1
 100:	41 04       	cpc	r4, r1
 102:	41 04       	cpc	r4, r1
 104:	41 04       	cpc	r4, r1
 106:	41 04       	cpc	r4, r1
 108:	41 04       	cpc	r4, r1
 10a:	41 04       	cpc	r4, r1
 10c:	43 02       	muls	r20, r19
 10e:	41 04       	cpc	r4, r1
 110:	41 04       	cpc	r4, r1
 112:	ef 03       	fmulsu	r22, r23
 114:	41 04       	cpc	r4, r1
 116:	41 04       	cpc	r4, r1
 118:	41 04       	cpc	r4, r1
 11a:	41 04       	cpc	r4, r1
 11c:	b3 03       	fmuls	r19, r19
 11e:	41 04       	cpc	r4, r1
 120:	41 04       	cpc	r4, r1
 122:	14 04       	cpc	r1, r4
 124:	41 04       	cpc	r4, r1
 126:	41 04       	cpc	r4, r1
 128:	41 04       	cpc	r4, r1
 12a:	23 04       	cpc	r2, r3
 12c:	41 04       	cpc	r4, r1
 12e:	41 04       	cpc	r4, r1
 130:	41 04       	cpc	r4, r1
 132:	41 04       	cpc	r4, r1
 134:	41 04       	cpc	r4, r1
 136:	41 04       	cpc	r4, r1
 138:	41 04       	cpc	r4, r1
 13a:	41 04       	cpc	r4, r1
 13c:	41 04       	cpc	r4, r1
 13e:	41 04       	cpc	r4, r1
 140:	41 04       	cpc	r4, r1
 142:	41 04       	cpc	r4, r1
 144:	41 04       	cpc	r4, r1
 146:	41 04       	cpc	r4, r1
 148:	41 04       	cpc	r4, r1
 14a:	41 04       	cpc	r4, r1
 14c:	41 04       	cpc	r4, r1
 14e:	41 04       	cpc	r4, r1
 150:	41 04       	cpc	r4, r1
 152:	41 04       	cpc	r4, r1
 154:	41 04       	cpc	r4, r1
 156:	41 04       	cpc	r4, r1
 158:	41 04       	cpc	r4, r1
 15a:	41 04       	cpc	r4, r1
 15c:	41 04       	cpc	r4, r1
 15e:	41 04       	cpc	r4, r1
 160:	41 04       	cpc	r4, r1
 162:	41 04       	cpc	r4, r1
 164:	41 04       	cpc	r4, r1
 166:	41 04       	cpc	r4, r1
 168:	41 04       	cpc	r4, r1
 16a:	41 04       	cpc	r4, r1
 16c:	70 02       	muls	r23, r16
 16e:	41 04       	cpc	r4, r1
 170:	41 04       	cpc	r4, r1
 172:	41 04       	cpc	r4, r1
 174:	41 04       	cpc	r4, r1
 176:	41 04       	cpc	r4, r1
 178:	41 04       	cpc	r4, r1
 17a:	41 04       	cpc	r4, r1
 17c:	41 04       	cpc	r4, r1
 17e:	41 04       	cpc	r4, r1
 180:	41 04       	cpc	r4, r1
 182:	41 04       	cpc	r4, r1
 184:	41 04       	cpc	r4, r1
 186:	41 04       	cpc	r4, r1
 188:	41 04       	cpc	r4, r1
 18a:	41 04       	cpc	r4, r1
 18c:	af 03       	fmulsu	r18, r23
 18e:	41 04       	cpc	r4, r1
 190:	41 04       	cpc	r4, r1
 192:	41 04       	cpc	r4, r1
 194:	41 04       	cpc	r4, r1
 196:	41 04       	cpc	r4, r1
 198:	41 04       	cpc	r4, r1
 19a:	41 04       	cpc	r4, r1
 19c:	41 04       	cpc	r4, r1
 19e:	41 04       	cpc	r4, r1
 1a0:	41 04       	cpc	r4, r1
 1a2:	41 04       	cpc	r4, r1
 1a4:	41 04       	cpc	r4, r1
 1a6:	41 04       	cpc	r4, r1
 1a8:	41 04       	cpc	r4, r1
 1aa:	33 04       	cpc	r3, r3
 1ac:	51 03       	mulsu	r21, r17
 1ae:	41 04       	cpc	r4, r1
 1b0:	41 04       	cpc	r4, r1
 1b2:	41 04       	cpc	r4, r1
 1b4:	41 04       	cpc	r4, r1
 1b6:	41 04       	cpc	r4, r1
 1b8:	41 04       	cpc	r4, r1
 1ba:	41 04       	cpc	r4, r1
 1bc:	41 04       	cpc	r4, r1
 1be:	41 04       	cpc	r4, r1
 1c0:	41 04       	cpc	r4, r1
 1c2:	41 04       	cpc	r4, r1
 1c4:	41 04       	cpc	r4, r1
 1c6:	41 04       	cpc	r4, r1
 1c8:	41 04       	cpc	r4, r1
 1ca:	41 04       	cpc	r4, r1
 1cc:	41 04       	cpc	r4, r1
 1ce:	41 04       	cpc	r4, r1
 1d0:	41 04       	cpc	r4, r1
 1d2:	41 04       	cpc	r4, r1
 1d4:	41 04       	cpc	r4, r1
 1d6:	41 04       	cpc	r4, r1
 1d8:	41 04       	cpc	r4, r1
 1da:	41 04       	cpc	r4, r1
 1dc:	c6 03       	fmuls	r20, r22
 1de:	41 04       	cpc	r4, r1
 1e0:	41 04       	cpc	r4, r1
 1e2:	41 04       	cpc	r4, r1
 1e4:	41 04       	cpc	r4, r1
 1e6:	41 04       	cpc	r4, r1
 1e8:	41 04       	cpc	r4, r1
 1ea:	41 04       	cpc	r4, r1
 1ec:	41 04       	cpc	r4, r1
 1ee:	41 04       	cpc	r4, r1
 1f0:	41 04       	cpc	r4, r1
 1f2:	41 04       	cpc	r4, r1
 1f4:	41 04       	cpc	r4, r1
 1f6:	41 04       	cpc	r4, r1
 1f8:	41 04       	cpc	r4, r1
 1fa:	41 04       	cpc	r4, r1
 1fc:	41 04       	cpc	r4, r1
 1fe:	41 04       	cpc	r4, r1
 200:	41 04       	cpc	r4, r1
 202:	41 04       	cpc	r4, r1
 204:	41 04       	cpc	r4, r1
 206:	41 04       	cpc	r4, r1
 208:	41 04       	cpc	r4, r1
 20a:	41 04       	cpc	r4, r1
 20c:	41 04       	cpc	r4, r1
 20e:	41 04       	cpc	r4, r1
 210:	41 04       	cpc	r4, r1
 212:	41 04       	cpc	r4, r1
 214:	41 04       	cpc	r4, r1
 216:	41 04       	cpc	r4, r1
 218:	41 04       	cpc	r4, r1
 21a:	41 04       	cpc	r4, r1
 21c:	41 04       	cpc	r4, r1
 21e:	41 04       	cpc	r4, r1
 220:	41 04       	cpc	r4, r1
 222:	41 04       	cpc	r4, r1
 224:	41 04       	cpc	r4, r1
 226:	41 04       	cpc	r4, r1
 228:	41 04       	cpc	r4, r1
 22a:	41 04       	cpc	r4, r1
 22c:	9d 02       	muls	r25, r29
 22e:	41 04       	cpc	r4, r1
 230:	41 04       	cpc	r4, r1
 232:	41 04       	cpc	r4, r1
 234:	41 04       	cpc	r4, r1
 236:	41 04       	cpc	r4, r1
 238:	41 04       	cpc	r4, r1
 23a:	41 04       	cpc	r4, r1
 23c:	41 04       	cpc	r4, r1
 23e:	41 04       	cpc	r4, r1
 240:	41 04       	cpc	r4, r1
 242:	41 04       	cpc	r4, r1
 244:	e4 03       	fmuls	r22, r20
 246:	41 04       	cpc	r4, r1
 248:	41 04       	cpc	r4, r1
 24a:	41 04       	cpc	r4, r1
 24c:	41 04       	cpc	r4, r1
 24e:	41 04       	cpc	r4, r1
 250:	41 04       	cpc	r4, r1
 252:	41 04       	cpc	r4, r1
 254:	41 04       	cpc	r4, r1
 256:	41 04       	cpc	r4, r1
 258:	41 04       	cpc	r4, r1
 25a:	41 04       	cpc	r4, r1
 25c:	e8 03       	fmulsu	r22, r16
 25e:	41 04       	cpc	r4, r1
 260:	41 04       	cpc	r4, r1
 262:	41 04       	cpc	r4, r1
 264:	0d 04       	cpc	r0, r13
 266:	41 04       	cpc	r4, r1
 268:	41 04       	cpc	r4, r1
 26a:	41 04       	cpc	r4, r1
 26c:	ab 03       	fmulsu	r18, r19
 26e:	41 04       	cpc	r4, r1
 270:	41 04       	cpc	r4, r1
 272:	41 04       	cpc	r4, r1
 274:	41 04       	cpc	r4, r1
 276:	41 04       	cpc	r4, r1
 278:	41 04       	cpc	r4, r1
 27a:	41 04       	cpc	r4, r1
 27c:	41 04       	cpc	r4, r1
 27e:	41 04       	cpc	r4, r1
 280:	41 04       	cpc	r4, r1
 282:	41 04       	cpc	r4, r1
 284:	41 04       	cpc	r4, r1
 286:	41 04       	cpc	r4, r1
 288:	41 04       	cpc	r4, r1
 28a:	41 04       	cpc	r4, r1
 28c:	d4 03       	fmuls	r21, r20
 28e:	41 04       	cpc	r4, r1
 290:	41 04       	cpc	r4, r1
 292:	41 04       	cpc	r4, r1
 294:	41 04       	cpc	r4, r1
 296:	41 04       	cpc	r4, r1
 298:	41 04       	cpc	r4, r1
 29a:	41 04       	cpc	r4, r1
 29c:	fd 03       	fmulsu	r23, r21
 29e:	41 04       	cpc	r4, r1
 2a0:	41 04       	cpc	r4, r1
 2a2:	41 04       	cpc	r4, r1
 2a4:	1b 04       	cpc	r1, r11
 2a6:	41 04       	cpc	r4, r1
 2a8:	2b 04       	cpc	r2, r11
 2aa:	3b 04       	cpc	r3, r11

000002ac <__ctors_end>:
 2ac:	11 24       	eor	r1, r1
 2ae:	1f be       	out	0x3f, r1	; 63
 2b0:	cf ef       	ldi	r28, 0xFF	; 255
 2b2:	da e0       	ldi	r29, 0x0A	; 10
 2b4:	de bf       	out	0x3e, r29	; 62
 2b6:	cd bf       	out	0x3d, r28	; 61

000002b8 <__do_copy_data>:
 2b8:	11 e0       	ldi	r17, 0x01	; 1
 2ba:	a0 e0       	ldi	r26, 0x00	; 0
 2bc:	b1 e0       	ldi	r27, 0x01	; 1
 2be:	e4 e4       	ldi	r30, 0x44	; 68
 2c0:	f9 e0       	ldi	r31, 0x09	; 9
 2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <__do_copy_data+0x10>
 2c4:	05 90       	lpm	r0, Z+
 2c6:	0d 92       	st	X+, r0
 2c8:	ac 33       	cpi	r26, 0x3C	; 60
 2ca:	b1 07       	cpc	r27, r17
 2cc:	d9 f7       	brne	.-10     	; 0x2c4 <__do_copy_data+0xc>

000002ce <__do_clear_bss>:
 2ce:	21 e0       	ldi	r18, 0x01	; 1
 2d0:	ac e3       	ldi	r26, 0x3C	; 60
 2d2:	b1 e0       	ldi	r27, 0x01	; 1
 2d4:	01 c0       	rjmp	.+2      	; 0x2d8 <.do_clear_bss_start>

000002d6 <.do_clear_bss_loop>:
 2d6:	1d 92       	st	X+, r1

000002d8 <.do_clear_bss_start>:
 2d8:	ab 34       	cpi	r26, 0x4B	; 75
 2da:	b2 07       	cpc	r27, r18
 2dc:	e1 f7       	brne	.-8      	; 0x2d6 <.do_clear_bss_loop>
 2de:	0e 94 58 04 	call	0x8b0	; 0x8b0 <main>
 2e2:	0c 94 a0 04 	jmp	0x940	; 0x940 <_exit>

000002e6 <__bad_interrupt>:
 2e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002ea <pwm_init>:
#include "/RoboTec/RoboTec/RoboTec/Driver/Headers/USART.h"

void pwm_init()
{
	//Set the direction pins as output for the motor driver.
	DDRB |= (1 << DDB4) | (1 << DDB7);
 2ea:	84 b1       	in	r24, 0x04	; 4
 2ec:	80 69       	ori	r24, 0x90	; 144
 2ee:	84 b9       	out	0x04, r24	; 4
	DDRC |= (1 << DDC7);
 2f0:	3f 9a       	sbi	0x07, 7	; 7
	DDRF |= (1 << DDF7);
 2f2:	87 9a       	sbi	0x10, 7	; 16
	DDRB |= (1 << DDB5)|(1 << DDB6);//PWM pins
 2f4:	84 b1       	in	r24, 0x04	; 4
 2f6:	80 66       	ori	r24, 0x60	; 96
 2f8:	84 b9       	out	0x04, r24	; 4
	
	TCCR1A |= (1 << COM1A1) | (1 << COM1B1);
 2fa:	e0 e8       	ldi	r30, 0x80	; 128
 2fc:	f0 e0       	ldi	r31, 0x00	; 0
 2fe:	80 81       	ld	r24, Z
 300:	80 6a       	ori	r24, 0xA0	; 160
 302:	80 83       	st	Z, r24
	TCCR1A |= (1 << WGM11);
 304:	80 81       	ld	r24, Z
 306:	82 60       	ori	r24, 0x02	; 2
 308:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM13) | (1 <<WGM12);
 30a:	e1 e8       	ldi	r30, 0x81	; 129
 30c:	f0 e0       	ldi	r31, 0x00	; 0
 30e:	80 81       	ld	r24, Z
 310:	88 61       	ori	r24, 0x18	; 24
 312:	80 83       	st	Z, r24
	TCCR1B |= (1 << CS10);
 314:	80 81       	ld	r24, Z
 316:	81 60       	ori	r24, 0x01	; 1
 318:	80 83       	st	Z, r24
	ICR1=0xFF;
 31a:	8f ef       	ldi	r24, 0xFF	; 255
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	90 93 87 00 	sts	0x0087, r25
 322:	80 93 86 00 	sts	0x0086, r24
	uart_print("PWM initialization finished!\r\n");
 326:	84 e0       	ldi	r24, 0x04	; 4
 328:	91 e0       	ldi	r25, 0x01	; 1
 32a:	0e 94 a0 01 	call	0x340	; 0x340 <uart_print>
 32e:	08 95       	ret

00000330 <uart_transmit>:

// transmit a char to uart
void uart_transmit( unsigned char data )
{
	// wait for empty transmit buffer
	while ( ! ( UCSR1A & ( 1 << UDRE1 ) ) )
 330:	e8 ec       	ldi	r30, 0xC8	; 200
 332:	f0 e0       	ldi	r31, 0x00	; 0
 334:	90 81       	ld	r25, Z
 336:	95 ff       	sbrs	r25, 5
 338:	fd cf       	rjmp	.-6      	; 0x334 <uart_transmit+0x4>
	;
	
	// put data into buffer, sends data
	UDR1 = data;
 33a:	80 93 ce 00 	sts	0x00CE, r24
 33e:	08 95       	ret

00000340 <uart_print>:
}
// write a string to the uart
void uart_print( char data[] )
{
 340:	0f 93       	push	r16
 342:	1f 93       	push	r17
 344:	cf 93       	push	r28
 346:	df 93       	push	r29
	//cli();
	uint8_t count = 0;
	uint8_t length = strlen(data);
 348:	fc 01       	movw	r30, r24
 34a:	01 90       	ld	r0, Z+
 34c:	00 20       	and	r0, r0
 34e:	e9 f7       	brne	.-6      	; 0x34a <uart_print+0xa>
 350:	31 97       	sbiw	r30, 0x01	; 1
 352:	1e 2f       	mov	r17, r30
 354:	18 1b       	sub	r17, r24
	
	for ( count = 0; count < length; count++ )
 356:	51 f0       	breq	.+20     	; 0x36c <uart_print+0x2c>
 358:	08 2f       	mov	r16, r24
 35a:	c0 2f       	mov	r28, r16
 35c:	d9 2f       	mov	r29, r25
	uart_transmit(data[count]);
 35e:	89 91       	ld	r24, Y+
 360:	0e 94 98 01 	call	0x330	; 0x330 <uart_transmit>
 364:	8c 2f       	mov	r24, r28
 366:	80 1b       	sub	r24, r16
{
	//cli();
	uint8_t count = 0;
	uint8_t length = strlen(data);
	
	for ( count = 0; count < length; count++ )
 368:	81 17       	cp	r24, r17
 36a:	c8 f3       	brcs	.-14     	; 0x35e <uart_print+0x1e>
	uart_transmit(data[count]);
	
	uart_transmit('\r');
 36c:	8d e0       	ldi	r24, 0x0D	; 13
 36e:	0e 94 98 01 	call	0x330	; 0x330 <uart_transmit>
	uart_transmit('\n');
 372:	8a e0       	ldi	r24, 0x0A	; 10
 374:	0e 94 98 01 	call	0x330	; 0x330 <uart_transmit>
	//sei();
}
 378:	df 91       	pop	r29
 37a:	cf 91       	pop	r28
 37c:	1f 91       	pop	r17
 37e:	0f 91       	pop	r16
 380:	08 95       	ret

00000382 <uart_init>:
void uart_init(void)
{
	// set baud rate
	unsigned int baud = 16u;//BAUD_PRESCALE;
	
	UBRR1H = (unsigned char) (baud >> 8 );
 382:	10 92 cd 00 	sts	0x00CD, r1
	UBRR1L = (unsigned char)baud;
 386:	80 e1       	ldi	r24, 0x10	; 16
 388:	80 93 cc 00 	sts	0x00CC, r24
	UCSR1A |= (1 << U2X1);
 38c:	e8 ec       	ldi	r30, 0xC8	; 200
 38e:	f0 e0       	ldi	r31, 0x00	; 0
 390:	80 81       	ld	r24, Z
 392:	82 60       	ori	r24, 0x02	; 2
 394:	80 83       	st	Z, r24
	
	// enable received and transmitter
	UCSR1B = ( 1 << RXEN1 ) | ( 1 << TXEN1 );
 396:	88 e1       	ldi	r24, 0x18	; 24
 398:	80 93 c9 00 	sts	0x00C9, r24
	
	// set frame format ( 8data, 1stop )
	UCSR1C = (1 << UCSZ10) | (1 << UCSZ11);
 39c:	86 e0       	ldi	r24, 0x06	; 6
 39e:	80 93 ca 00 	sts	0x00CA, r24
 3a2:	08 95       	ret

000003a4 <CheckSensor>:

uint8_t CheckSensor()
{
	uint8_t state;
	
	state = (((0x0F & PINB)) | ((0x70 & PINF)) | (0x80 & PIND));
 3a4:	83 b1       	in	r24, 0x03	; 3
 3a6:	2f b1       	in	r18, 0x0f	; 15
 3a8:	99 b1       	in	r25, 0x09	; 9
 3aa:	20 77       	andi	r18, 0x70	; 112
 3ac:	8f 70       	andi	r24, 0x0F	; 15
 3ae:	82 2b       	or	r24, r18
 3b0:	90 78       	andi	r25, 0x80	; 128
	
 	return state;
}
 3b2:	89 2b       	or	r24, r25
 3b4:	08 95       	ret

000003b6 <ProcessLineState>:

void ProcessLineState(uint8_t mask)
{
	left_speed = 0;
 3b6:	10 92 44 01 	sts	0x0144, r1
	right_speed = 0;
 3ba:	10 92 43 01 	sts	0x0143, r1
	radius = 0; 
 3be:	10 92 00 01 	sts	0x0100, r1
 3c2:	10 92 01 01 	sts	0x0101, r1
 3c6:	10 92 02 01 	sts	0x0102, r1
 3ca:	10 92 03 01 	sts	0x0103, r1
	omega = 0;
 3ce:	10 92 3d 01 	sts	0x013D, r1
 3d2:	10 92 3e 01 	sts	0x013E, r1
 3d6:	10 92 3f 01 	sts	0x013F, r1
 3da:	10 92 40 01 	sts	0x0140, r1
	
	switch(mask)
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	fc 01       	movw	r30, r24
 3e2:	ea 5a       	subi	r30, 0xAA	; 170
 3e4:	ff 4f       	sbci	r31, 0xFF	; 255
 3e6:	0c 94 9a 04 	jmp	0x934	; 0x934 <__tablejump2__>
	{
		case 0b00000000:
		{
			//forward(speed(0));
			//Do nothing
			if((prevState == 0b00011000) || (prevState==0b00110000) || (prevState == 0b00001100))
 3ea:	80 91 41 01 	lds	r24, 0x0141
 3ee:	88 31       	cpi	r24, 0x18	; 24
 3f0:	21 f0       	breq	.+8      	; 0x3fa <ProcessLineState+0x44>
 3f2:	80 33       	cpi	r24, 0x30	; 48
 3f4:	11 f0       	breq	.+4      	; 0x3fa <ProcessLineState+0x44>
 3f6:	8c 30       	cpi	r24, 0x0C	; 12
 3f8:	21 f4       	brne	.+8      	; 0x402 <ProcessLineState+0x4c>
			{
				forward(SPEED);
 3fa:	84 e6       	ldi	r24, 0x64	; 100
 3fc:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <forward>
 400:	14 c0       	rjmp	.+40     	; 0x42a <ProcessLineState+0x74>
			}
			else
			{
				
				switch(angleFlag)
 402:	80 91 42 01 	lds	r24, 0x0142
 406:	81 30       	cpi	r24, 0x01	; 1
 408:	19 f0       	breq	.+6      	; 0x410 <ProcessLineState+0x5a>
 40a:	82 30       	cpi	r24, 0x02	; 2
 40c:	41 f0       	breq	.+16     	; 0x41e <ProcessLineState+0x68>
 40e:	0d c0       	rjmp	.+26     	; 0x42a <ProcessLineState+0x74>
				{
					case ACUTE_ANGLE_LEFT:
					{
						steer(SPEED-30,0);
 410:	60 e0       	ldi	r22, 0x00	; 0
 412:	86 e4       	ldi	r24, 0x46	; 70
 414:	0e 94 8b 04 	call	0x916	; 0x916 <steer>
						angleFlag = PREVIOUS_COMAND;
 418:	10 92 42 01 	sts	0x0142, r1
					}
					break;
 41c:	06 c0       	rjmp	.+12     	; 0x42a <ProcessLineState+0x74>
					case ACUTE_ANGLE_RIGHT:
					{
						steer(SPEED-30,0);
 41e:	60 e0       	ldi	r22, 0x00	; 0
 420:	86 e4       	ldi	r24, 0x46	; 70
 422:	0e 94 8b 04 	call	0x916	; 0x916 <steer>
						angleFlag = PREVIOUS_COMAND;
 426:	10 92 42 01 	sts	0x0142, r1
					{
						
					}
				}
			}
			prevState = mask;
 42a:	10 92 41 01 	sts	0x0141, r1
		}
		break;
 42e:	08 95       	ret
		
		case 0b00011000:
		{
			//Go forward 
			//alfa = 0
			if(prevState != mask)
 430:	80 91 41 01 	lds	r24, 0x0141
 434:	88 31       	cpi	r24, 0x18	; 24
 436:	11 f0       	breq	.+4      	; 0x43c <ProcessLineState+0x86>
			{
				c=0;
 438:	10 92 3c 01 	sts	0x013C, r1
			}
						
			if(count == 1100)
 43c:	80 91 45 01 	lds	r24, 0x0145
 440:	90 91 46 01 	lds	r25, 0x0146
 444:	8c 34       	cpi	r24, 0x4C	; 76
 446:	94 40       	sbci	r25, 0x04	; 4
 448:	51 f4       	brne	.+20     	; 0x45e <ProcessLineState+0xa8>
			{
				c+=3;
 44a:	80 91 3c 01 	lds	r24, 0x013C
 44e:	8d 5f       	subi	r24, 0xFD	; 253
 450:	80 93 3c 01 	sts	0x013C, r24
				count=0;
 454:	10 92 46 01 	sts	0x0146, r1
 458:	10 92 45 01 	sts	0x0145, r1
 45c:	09 c0       	rjmp	.+18     	; 0x470 <ProcessLineState+0xba>
			}
			else
			{
				count++;
 45e:	80 91 45 01 	lds	r24, 0x0145
 462:	90 91 46 01 	lds	r25, 0x0146
 466:	01 96       	adiw	r24, 0x01	; 1
 468:	90 93 46 01 	sts	0x0146, r25
 46c:	80 93 45 01 	sts	0x0145, r24
			}
						
			right_speed = SPEED + c;
 470:	80 91 3c 01 	lds	r24, 0x013C
 474:	8c 59       	subi	r24, 0x9C	; 156
 476:	80 93 43 01 	sts	0x0143, r24
			
			forward(right_speed);
 47a:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <forward>

			prevState = mask;
 47e:	88 e1       	ldi	r24, 0x18	; 24
 480:	80 93 41 01 	sts	0x0141, r24
		}
		break;
 484:	08 95       	ret
		case 0b00110000:
		{
			//turn left
			//alfa = 4
			
			if(prevState != mask)
 486:	80 91 41 01 	lds	r24, 0x0141
 48a:	80 33       	cpi	r24, 0x30	; 48
 48c:	19 f0       	breq	.+6      	; 0x494 <ProcessLineState+0xde>
			{
				c=10;
 48e:	8a e0       	ldi	r24, 0x0A	; 10
 490:	80 93 3c 01 	sts	0x013C, r24
			}
			
			if(count == 1500)
 494:	80 91 45 01 	lds	r24, 0x0145
 498:	90 91 46 01 	lds	r25, 0x0146
 49c:	8c 3d       	cpi	r24, 0xDC	; 220
 49e:	95 40       	sbci	r25, 0x05	; 5
 4a0:	51 f4       	brne	.+20     	; 0x4b6 <ProcessLineState+0x100>
			{
				c+=3;
 4a2:	80 91 3c 01 	lds	r24, 0x013C
 4a6:	8d 5f       	subi	r24, 0xFD	; 253
 4a8:	80 93 3c 01 	sts	0x013C, r24
				count=0;
 4ac:	10 92 46 01 	sts	0x0146, r1
 4b0:	10 92 45 01 	sts	0x0145, r1
 4b4:	09 c0       	rjmp	.+18     	; 0x4c8 <ProcessLineState+0x112>
			}
			else
			{
				count++;
 4b6:	80 91 45 01 	lds	r24, 0x0145
 4ba:	90 91 46 01 	lds	r25, 0x0146
 4be:	01 96       	adiw	r24, 0x01	; 1
 4c0:	90 93 46 01 	sts	0x0146, r25
 4c4:	80 93 45 01 	sts	0x0145, r24
			}
			
			right_speed = SPEED + c;
 4c8:	60 91 3c 01 	lds	r22, 0x013C
 4cc:	6c 59       	subi	r22, 0x9C	; 156
 4ce:	60 93 43 01 	sts	0x0143, r22
			steer(SPEED, right_speed);
 4d2:	84 e6       	ldi	r24, 0x64	; 100
 4d4:	0e 94 8b 04 	call	0x916	; 0x916 <steer>
			
			prevState = mask;
 4d8:	80 e3       	ldi	r24, 0x30	; 48
 4da:	80 93 41 01 	sts	0x0141, r24
		}
		break;
 4de:	08 95       	ret
		
		case 0b01100000:
		{
			//turn left
			//alfa = 8
			if(prevState != mask)
 4e0:	80 91 41 01 	lds	r24, 0x0141
 4e4:	80 36       	cpi	r24, 0x60	; 96
 4e6:	19 f0       	breq	.+6      	; 0x4ee <ProcessLineState+0x138>
			{
				c=25;
 4e8:	89 e1       	ldi	r24, 0x19	; 25
 4ea:	80 93 3c 01 	sts	0x013C, r24
			}
			
			if(count == 1700)
 4ee:	80 91 45 01 	lds	r24, 0x0145
 4f2:	90 91 46 01 	lds	r25, 0x0146
 4f6:	84 3a       	cpi	r24, 0xA4	; 164
 4f8:	96 40       	sbci	r25, 0x06	; 6
 4fa:	51 f4       	brne	.+20     	; 0x510 <ProcessLineState+0x15a>
			{
				c+=11;
 4fc:	80 91 3c 01 	lds	r24, 0x013C
 500:	85 5f       	subi	r24, 0xF5	; 245
 502:	80 93 3c 01 	sts	0x013C, r24
				count=0;
 506:	10 92 46 01 	sts	0x0146, r1
 50a:	10 92 45 01 	sts	0x0145, r1
 50e:	09 c0       	rjmp	.+18     	; 0x522 <ProcessLineState+0x16c>
			}
			else
			{
				count++;
 510:	80 91 45 01 	lds	r24, 0x0145
 514:	90 91 46 01 	lds	r25, 0x0146
 518:	01 96       	adiw	r24, 0x01	; 1
 51a:	90 93 46 01 	sts	0x0146, r25
 51e:	80 93 45 01 	sts	0x0145, r24
			}
			

			right_speed = SPEED + c;
 522:	60 91 3c 01 	lds	r22, 0x013C
 526:	6c 59       	subi	r22, 0x9C	; 156
 528:	60 93 43 01 	sts	0x0143, r22
			steer(SPEED, right_speed);
 52c:	84 e6       	ldi	r24, 0x64	; 100
 52e:	0e 94 8b 04 	call	0x916	; 0x916 <steer>
			
			prevState = mask;
 532:	80 e6       	ldi	r24, 0x60	; 96
 534:	80 93 41 01 	sts	0x0141, r24
		}
		break;
 538:	08 95       	ret
		case 0b11000000:
		{
			//turn left
			//alfa = 12
			
			if(prevState != mask)
 53a:	80 91 41 01 	lds	r24, 0x0141
 53e:	80 3c       	cpi	r24, 0xC0	; 192
 540:	19 f0       	breq	.+6      	; 0x548 <ProcessLineState+0x192>
			{
				c=35;
 542:	83 e2       	ldi	r24, 0x23	; 35
 544:	80 93 3c 01 	sts	0x013C, r24
			}
			
			if(count == 2200)
 548:	80 91 45 01 	lds	r24, 0x0145
 54c:	90 91 46 01 	lds	r25, 0x0146
 550:	88 39       	cpi	r24, 0x98	; 152
 552:	98 40       	sbci	r25, 0x08	; 8
 554:	51 f4       	brne	.+20     	; 0x56a <ProcessLineState+0x1b4>
			{
				c+=15;
 556:	80 91 3c 01 	lds	r24, 0x013C
 55a:	81 5f       	subi	r24, 0xF1	; 241
 55c:	80 93 3c 01 	sts	0x013C, r24
				count=0;
 560:	10 92 46 01 	sts	0x0146, r1
 564:	10 92 45 01 	sts	0x0145, r1
 568:	09 c0       	rjmp	.+18     	; 0x57c <ProcessLineState+0x1c6>
			}
			else
			{
				count++;
 56a:	80 91 45 01 	lds	r24, 0x0145
 56e:	90 91 46 01 	lds	r25, 0x0146
 572:	01 96       	adiw	r24, 0x01	; 1
 574:	90 93 46 01 	sts	0x0146, r25
 578:	80 93 45 01 	sts	0x0145, r24
			}
			
			
			right_speed = SPEED + c;
 57c:	60 91 3c 01 	lds	r22, 0x013C
 580:	6c 59       	subi	r22, 0x9C	; 156
 582:	60 93 43 01 	sts	0x0143, r22
			steer(SPEED-50, right_speed);
 586:	82 e3       	ldi	r24, 0x32	; 50
 588:	0e 94 8b 04 	call	0x916	; 0x916 <steer>
			
			prevState = mask;
 58c:	80 ec       	ldi	r24, 0xC0	; 192
 58e:	80 93 41 01 	sts	0x0141, r24
		}
		break;
 592:	08 95       	ret
		case 0b00001100:
		{
			//turn right
			//alfa = 4
			
			if(prevState != mask)
 594:	80 91 41 01 	lds	r24, 0x0141
 598:	8c 30       	cpi	r24, 0x0C	; 12
 59a:	19 f0       	breq	.+6      	; 0x5a2 <ProcessLineState+0x1ec>
			{
				c=10;
 59c:	8a e0       	ldi	r24, 0x0A	; 10
 59e:	80 93 3c 01 	sts	0x013C, r24
			}
			
			if(count == 1500)
 5a2:	80 91 45 01 	lds	r24, 0x0145
 5a6:	90 91 46 01 	lds	r25, 0x0146
 5aa:	8c 3d       	cpi	r24, 0xDC	; 220
 5ac:	95 40       	sbci	r25, 0x05	; 5
 5ae:	51 f4       	brne	.+20     	; 0x5c4 <ProcessLineState+0x20e>
			{
				c+=3;
 5b0:	80 91 3c 01 	lds	r24, 0x013C
 5b4:	8d 5f       	subi	r24, 0xFD	; 253
 5b6:	80 93 3c 01 	sts	0x013C, r24
				count=0;
 5ba:	10 92 46 01 	sts	0x0146, r1
 5be:	10 92 45 01 	sts	0x0145, r1
 5c2:	09 c0       	rjmp	.+18     	; 0x5d6 <ProcessLineState+0x220>
			}
			else
			{
				count++;
 5c4:	80 91 45 01 	lds	r24, 0x0145
 5c8:	90 91 46 01 	lds	r25, 0x0146
 5cc:	01 96       	adiw	r24, 0x01	; 1
 5ce:	90 93 46 01 	sts	0x0146, r25
 5d2:	80 93 45 01 	sts	0x0145, r24
			}
			

			left_speed = SPEED + c;
 5d6:	80 91 3c 01 	lds	r24, 0x013C
 5da:	8c 59       	subi	r24, 0x9C	; 156
 5dc:	80 93 44 01 	sts	0x0144, r24
			
			steer(left_speed, SPEED);
 5e0:	64 e6       	ldi	r22, 0x64	; 100
 5e2:	0e 94 8b 04 	call	0x916	; 0x916 <steer>
			
			prevState = mask;
 5e6:	8c e0       	ldi	r24, 0x0C	; 12
 5e8:	80 93 41 01 	sts	0x0141, r24
		}
		break;		
 5ec:	08 95       	ret
		case 0b00000110:
		{
			//turn right
			//alfa = 8
			
			if(prevState != mask)
 5ee:	80 91 41 01 	lds	r24, 0x0141
 5f2:	86 30       	cpi	r24, 0x06	; 6
 5f4:	19 f0       	breq	.+6      	; 0x5fc <ProcessLineState+0x246>
			{
				c=25;
 5f6:	89 e1       	ldi	r24, 0x19	; 25
 5f8:	80 93 3c 01 	sts	0x013C, r24
			}
			
			if(count == 1700)
 5fc:	80 91 45 01 	lds	r24, 0x0145
 600:	90 91 46 01 	lds	r25, 0x0146
 604:	84 3a       	cpi	r24, 0xA4	; 164
 606:	96 40       	sbci	r25, 0x06	; 6
 608:	51 f4       	brne	.+20     	; 0x61e <ProcessLineState+0x268>
			{
				c+=11;
 60a:	80 91 3c 01 	lds	r24, 0x013C
 60e:	85 5f       	subi	r24, 0xF5	; 245
 610:	80 93 3c 01 	sts	0x013C, r24
				count=0;
 614:	10 92 46 01 	sts	0x0146, r1
 618:	10 92 45 01 	sts	0x0145, r1
 61c:	09 c0       	rjmp	.+18     	; 0x630 <ProcessLineState+0x27a>
			}
			else
			{
				count++;
 61e:	80 91 45 01 	lds	r24, 0x0145
 622:	90 91 46 01 	lds	r25, 0x0146
 626:	01 96       	adiw	r24, 0x01	; 1
 628:	90 93 46 01 	sts	0x0146, r25
 62c:	80 93 45 01 	sts	0x0145, r24
			}
			

			left_speed = SPEED + c;
 630:	80 91 3c 01 	lds	r24, 0x013C
 634:	8c 59       	subi	r24, 0x9C	; 156
 636:	80 93 44 01 	sts	0x0144, r24
			
			steer(left_speed, SPEED);
 63a:	64 e6       	ldi	r22, 0x64	; 100
 63c:	0e 94 8b 04 	call	0x916	; 0x916 <steer>
			prevState = mask;
 640:	86 e0       	ldi	r24, 0x06	; 6
 642:	80 93 41 01 	sts	0x0141, r24
		}
		break;
 646:	08 95       	ret
		
		case 0b00000011:
		{
			//turn right
			//alfa = 12
			if(prevState != mask)
 648:	80 91 41 01 	lds	r24, 0x0141
 64c:	83 30       	cpi	r24, 0x03	; 3
 64e:	19 f0       	breq	.+6      	; 0x656 <ProcessLineState+0x2a0>
			{
				c=35;
 650:	83 e2       	ldi	r24, 0x23	; 35
 652:	80 93 3c 01 	sts	0x013C, r24
			}
			
			if(count == 2200)
 656:	80 91 45 01 	lds	r24, 0x0145
 65a:	90 91 46 01 	lds	r25, 0x0146
 65e:	88 39       	cpi	r24, 0x98	; 152
 660:	98 40       	sbci	r25, 0x08	; 8
 662:	51 f4       	brne	.+20     	; 0x678 <ProcessLineState+0x2c2>
			{
				c+=15;
 664:	80 91 3c 01 	lds	r24, 0x013C
 668:	81 5f       	subi	r24, 0xF1	; 241
 66a:	80 93 3c 01 	sts	0x013C, r24
				count=0;
 66e:	10 92 46 01 	sts	0x0146, r1
 672:	10 92 45 01 	sts	0x0145, r1
 676:	09 c0       	rjmp	.+18     	; 0x68a <ProcessLineState+0x2d4>
			}
			else
			{
				count++;
 678:	80 91 45 01 	lds	r24, 0x0145
 67c:	90 91 46 01 	lds	r25, 0x0146
 680:	01 96       	adiw	r24, 0x01	; 1
 682:	90 93 46 01 	sts	0x0146, r25
 686:	80 93 45 01 	sts	0x0145, r24
			}
			

			left_speed = SPEED + c;
 68a:	80 91 3c 01 	lds	r24, 0x013C
 68e:	8c 59       	subi	r24, 0x9C	; 156
 690:	80 93 44 01 	sts	0x0144, r24
			
			steer(left_speed, SPEED-50);
 694:	62 e3       	ldi	r22, 0x32	; 50
 696:	0e 94 8b 04 	call	0x916	; 0x916 <steer>
			prevState = mask;
 69a:	83 e0       	ldi	r24, 0x03	; 3
 69c:	80 93 41 01 	sts	0x0141, r24
				
			prevState = mask;
		}
		break;
 6a0:	08 95       	ret
		case 0b10000000:
		{
			//turn sharply to the left
			//alfa = 16
			if(prevState != mask)
 6a2:	80 91 41 01 	lds	r24, 0x0141
 6a6:	80 38       	cpi	r24, 0x80	; 128
 6a8:	19 f0       	breq	.+6      	; 0x6b0 <ProcessLineState+0x2fa>
			{
				c=65;
 6aa:	81 e4       	ldi	r24, 0x41	; 65
 6ac:	80 93 3c 01 	sts	0x013C, r24
			}
			
			if(count == 2200)
 6b0:	80 91 45 01 	lds	r24, 0x0145
 6b4:	90 91 46 01 	lds	r25, 0x0146
 6b8:	88 39       	cpi	r24, 0x98	; 152
 6ba:	98 40       	sbci	r25, 0x08	; 8
 6bc:	51 f4       	brne	.+20     	; 0x6d2 <ProcessLineState+0x31c>
			{
				c+=17;
 6be:	80 91 3c 01 	lds	r24, 0x013C
 6c2:	8f 5e       	subi	r24, 0xEF	; 239
 6c4:	80 93 3c 01 	sts	0x013C, r24
				count=0;
 6c8:	10 92 46 01 	sts	0x0146, r1
 6cc:	10 92 45 01 	sts	0x0145, r1
 6d0:	09 c0       	rjmp	.+18     	; 0x6e4 <ProcessLineState+0x32e>
			}
			else
			{
				count++;
 6d2:	80 91 45 01 	lds	r24, 0x0145
 6d6:	90 91 46 01 	lds	r25, 0x0146
 6da:	01 96       	adiw	r24, 0x01	; 1
 6dc:	90 93 46 01 	sts	0x0146, r25
 6e0:	80 93 45 01 	sts	0x0145, r24
			}
			

			right_speed = SPEED + c;
 6e4:	60 91 3c 01 	lds	r22, 0x013C
 6e8:	6c 59       	subi	r22, 0x9C	; 156
 6ea:	60 93 43 01 	sts	0x0143, r22
			
			steer(SPEED-70, right_speed);
 6ee:	8e e1       	ldi	r24, 0x1E	; 30
 6f0:	0e 94 8b 04 	call	0x916	; 0x916 <steer>
			//steer(left_speed, right_speed);
			prevState = mask;
 6f4:	80 e8       	ldi	r24, 0x80	; 128
 6f6:	80 93 41 01 	sts	0x0141, r24
			prevState = mask;
		}
		break;
 6fa:	08 95       	ret
		case 0b00000001:
		{
			//turn sharply to the right
			//alfa = 16
			if(prevState != mask)
 6fc:	80 91 41 01 	lds	r24, 0x0141
 700:	81 30       	cpi	r24, 0x01	; 1
 702:	19 f0       	breq	.+6      	; 0x70a <ProcessLineState+0x354>
			{
				c=65;
 704:	81 e4       	ldi	r24, 0x41	; 65
 706:	80 93 3c 01 	sts	0x013C, r24
			}
						
			if(count == 2200)
 70a:	80 91 45 01 	lds	r24, 0x0145
 70e:	90 91 46 01 	lds	r25, 0x0146
 712:	88 39       	cpi	r24, 0x98	; 152
 714:	98 40       	sbci	r25, 0x08	; 8
 716:	51 f4       	brne	.+20     	; 0x72c <ProcessLineState+0x376>
			{
				c+=17;
 718:	80 91 3c 01 	lds	r24, 0x013C
 71c:	8f 5e       	subi	r24, 0xEF	; 239
 71e:	80 93 3c 01 	sts	0x013C, r24
				count=0;
 722:	10 92 46 01 	sts	0x0146, r1
 726:	10 92 45 01 	sts	0x0145, r1
 72a:	09 c0       	rjmp	.+18     	; 0x73e <ProcessLineState+0x388>
			}
			else
			{
				count++;
 72c:	80 91 45 01 	lds	r24, 0x0145
 730:	90 91 46 01 	lds	r25, 0x0146
 734:	01 96       	adiw	r24, 0x01	; 1
 736:	90 93 46 01 	sts	0x0146, r25
 73a:	80 93 45 01 	sts	0x0145, r24
			}
						

			left_speed = SPEED + c;
 73e:	80 91 3c 01 	lds	r24, 0x013C
 742:	8c 59       	subi	r24, 0x9C	; 156
 744:	80 93 44 01 	sts	0x0144, r24
						
			steer(left_speed, SPEED-70);
 748:	6e e1       	ldi	r22, 0x1E	; 30
 74a:	0e 94 8b 04 	call	0x916	; 0x916 <steer>
			//steer(left_speed, right_speed);
			prevState = mask;
 74e:	81 e0       	ldi	r24, 0x01	; 1
 750:	80 93 41 01 	sts	0x0141, r24
			
		}
		break;
 754:	08 95       	ret
		case 0b11100000:
		{
			prevState = mask;
 756:	80 ee       	ldi	r24, 0xE0	; 224
 758:	80 93 41 01 	sts	0x0141, r24
		}
		//turn left
		break;
 75c:	08 95       	ret
		
		case 0b01110000:
		//turn left
		{
			prevState = mask;
 75e:	80 e7       	ldi	r24, 0x70	; 112
 760:	80 93 41 01 	sts	0x0141, r24
		}
		break;
 764:	08 95       	ret
		
		case 0b00111000:
		//turn left
		{
			prevState = mask;
 766:	88 e3       	ldi	r24, 0x38	; 56
 768:	80 93 41 01 	sts	0x0141, r24
		}
		break;
 76c:	08 95       	ret
		
		case 0b00011100:
		//turn right
		{
			prevState = mask;
 76e:	8c e1       	ldi	r24, 0x1C	; 28
 770:	80 93 41 01 	sts	0x0141, r24
		}
		break;
 774:	08 95       	ret
		
		case 0b00001110:
		//turn right
		{
			prevState = mask;
 776:	8e e0       	ldi	r24, 0x0E	; 14
 778:	80 93 41 01 	sts	0x0141, r24
		}
		break;
 77c:	08 95       	ret
		
		case 0b00000111:
		//turn right
		{
			angleFlag = ACUTE_ANGLE_RIGHT;
 77e:	82 e0       	ldi	r24, 0x02	; 2
 780:	80 93 42 01 	sts	0x0142, r24
			prevState = mask;
 784:	87 e0       	ldi	r24, 0x07	; 7
 786:	80 93 41 01 	sts	0x0141, r24
		}
		break;
 78a:	08 95       	ret
		
		case 0b10011000:
		//acute angle turn towards left
		{
		
			angleFlag = ACUTE_ANGLE_LEFT;
 78c:	81 e0       	ldi	r24, 0x01	; 1
 78e:	80 93 42 01 	sts	0x0142, r24
			prevState = mask;
 792:	88 e9       	ldi	r24, 0x98	; 152
 794:	80 93 41 01 	sts	0x0141, r24
		}
		break;
 798:	08 95       	ret
		
		case 0b00011001:
		//acute angle turn towards right
		{
			angleFlag = ACUTE_ANGLE_RIGHT;
 79a:	82 e0       	ldi	r24, 0x02	; 2
 79c:	80 93 42 01 	sts	0x0142, r24
			prevState = mask;
 7a0:	89 e1       	ldi	r24, 0x19	; 25
 7a2:	80 93 41 01 	sts	0x0141, r24
		}
		break;
 7a6:	08 95       	ret
		case 0b11110000:
		//90 degree turn towards left
		{
			left_speed = 0;
			steer(left_speed, (SPEED/2)-30);
 7a8:	64 e1       	ldi	r22, 0x14	; 20
 7aa:	80 e0       	ldi	r24, 0x00	; 0
 7ac:	0e 94 8b 04 	call	0x916	; 0x916 <steer>
			prevState = mask;
 7b0:	80 ef       	ldi	r24, 0xF0	; 240
 7b2:	80 93 41 01 	sts	0x0141, r24
		}
		break;
 7b6:	08 95       	ret
		
		case 0b00001111:
		//90 degree turn towards right
		{
			right_speed = 0;
			steer((SPEED/2)-30, right_speed);
 7b8:	60 e0       	ldi	r22, 0x00	; 0
 7ba:	84 e1       	ldi	r24, 0x14	; 20
 7bc:	0e 94 8b 04 	call	0x916	; 0x916 <steer>
			prevState = mask;
 7c0:	8f e0       	ldi	r24, 0x0F	; 15
 7c2:	80 93 41 01 	sts	0x0141, r24
		}
		break;
 7c6:	08 95       	ret
		
		case 0b11001100:
		// acute angle turn towards left
		{
			prevState = mask;
 7c8:	8c ec       	ldi	r24, 0xCC	; 204
 7ca:	80 93 41 01 	sts	0x0141, r24
		}
		break;
 7ce:	08 95       	ret
		
		case 0b11011000 :
		// acute angle turn towards left
		{
			angleFlag = ACUTE_ANGLE_LEFT;
 7d0:	81 e0       	ldi	r24, 0x01	; 1
 7d2:	80 93 42 01 	sts	0x0142, r24
			prevState = mask;
 7d6:	88 ed       	ldi	r24, 0xD8	; 216
 7d8:	80 93 41 01 	sts	0x0141, r24
		}
		break;
 7dc:	08 95       	ret
		
		case 0b00110011:
		// acute angle turn towards right
		{
			angleFlag = ACUTE_ANGLE_RIGHT;
 7de:	82 e0       	ldi	r24, 0x02	; 2
 7e0:	80 93 42 01 	sts	0x0142, r24
			prevState = mask;
 7e4:	83 e3       	ldi	r24, 0x33	; 51
 7e6:	80 93 41 01 	sts	0x0141, r24
		}
		break;
 7ea:	08 95       	ret
		
		case 0b00011011:
		// acute angle turn towards right
		{
			angleFlag = ACUTE_ANGLE_RIGHT;
 7ec:	82 e0       	ldi	r24, 0x02	; 2
 7ee:	80 93 42 01 	sts	0x0142, r24
			prevState = mask;
 7f2:	8b e1       	ldi	r24, 0x1B	; 27
 7f4:	80 93 41 01 	sts	0x0141, r24
		}
		break;
 7f8:	08 95       	ret
		
		case 0b11111000:
		//90 degree turn towards left
		{
			left_speed = 0;
			steer(left_speed, (SPEED/2)-30);
 7fa:	64 e1       	ldi	r22, 0x14	; 20
 7fc:	80 e0       	ldi	r24, 0x00	; 0
 7fe:	0e 94 8b 04 	call	0x916	; 0x916 <steer>
			prevState = mask;
 802:	88 ef       	ldi	r24, 0xF8	; 248
 804:	80 93 41 01 	sts	0x0141, r24
		}
		break;
 808:	08 95       	ret
		
		case 0b00011111:
		//90 degree turn towards right
		{
			right_speed = 0;
			steer((SPEED/2)-30, right_speed);
 80a:	60 e0       	ldi	r22, 0x00	; 0
 80c:	84 e1       	ldi	r24, 0x14	; 20
 80e:	0e 94 8b 04 	call	0x916	; 0x916 <steer>
			prevState = mask;
 812:	8f e1       	ldi	r24, 0x1F	; 31
 814:	80 93 41 01 	sts	0x0141, r24
		}
		break;
 818:	08 95       	ret
		
		case 0b11011100:
		//acute angle turn towards left
		{
			angleFlag = ACUTE_ANGLE_LEFT;
 81a:	81 e0       	ldi	r24, 0x01	; 1
 81c:	80 93 42 01 	sts	0x0142, r24
			prevState = mask;
 820:	8c ed       	ldi	r24, 0xDC	; 220
 822:	80 93 41 01 	sts	0x0141, r24
		}
		break;
 826:	08 95       	ret
		
		case 0b00111011:
		//acute angle turn towards right
		{
			angleFlag = ACUTE_ANGLE_RIGHT;
 828:	82 e0       	ldi	r24, 0x02	; 2
 82a:	80 93 42 01 	sts	0x0142, r24
			prevState = mask;
 82e:	8b e3       	ldi	r24, 0x3B	; 59
 830:	80 93 41 01 	sts	0x0141, r24
		}
		break;
 834:	08 95       	ret
		
		case 0b11111100:
		//90 degree turn towards left
		{
			left_speed = 0;
			steer(left_speed, (SPEED/2)-30);
 836:	64 e1       	ldi	r22, 0x14	; 20
 838:	80 e0       	ldi	r24, 0x00	; 0
 83a:	0e 94 8b 04 	call	0x916	; 0x916 <steer>
			prevState = mask;
 83e:	8c ef       	ldi	r24, 0xFC	; 252
 840:	80 93 41 01 	sts	0x0141, r24
		}
		break;
 844:	08 95       	ret
		
		case 0b00111111:
		//90 degree turn towards right
		{
			left_speed = 0;
			steer(left_speed, (SPEED/2)-30);
 846:	64 e1       	ldi	r22, 0x14	; 20
 848:	80 e0       	ldi	r24, 0x00	; 0
 84a:	0e 94 8b 04 	call	0x916	; 0x916 <steer>
			prevState = mask;
 84e:	8f e3       	ldi	r24, 0x3F	; 63
 850:	80 93 41 01 	sts	0x0141, r24
		}
		break;
 854:	08 95       	ret
		
		case 0b11111110:
		//turn to left
		{
			right_speed = 0;
			steer(SPEED/2, right_speed);
 856:	60 e0       	ldi	r22, 0x00	; 0
 858:	82 e3       	ldi	r24, 0x32	; 50
 85a:	0e 94 8b 04 	call	0x916	; 0x916 <steer>
			prevState = mask;
 85e:	8e ef       	ldi	r24, 0xFE	; 254
 860:	80 93 41 01 	sts	0x0141, r24
		}
		break;
 864:	08 95       	ret
		
		case 0b01111111:
		//turn to right
		{
			left_speed = 0;
			steer(left_speed, SPEED/2);
 866:	62 e3       	ldi	r22, 0x32	; 50
 868:	80 e0       	ldi	r24, 0x00	; 0
 86a:	0e 94 8b 04 	call	0x916	; 0x916 <steer>
			prevState = mask;
 86e:	8f e7       	ldi	r24, 0x7F	; 127
 870:	80 93 41 01 	sts	0x0141, r24
		}
		break;
 874:	08 95       	ret
		
		case 0b11111111:
		//do nothing
		{
			forward(SPEED);
 876:	84 e6       	ldi	r24, 0x64	; 100
 878:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <forward>
			prevState = mask;
 87c:	8f ef       	ldi	r24, 0xFF	; 255
 87e:	80 93 41 01 	sts	0x0141, r24
 882:	08 95       	ret

00000884 <__vector_29>:
#include "/RoboTec/RoboTec/RoboTec/Driver/Headers/USART.h"
#include <avr/interrupt.h>


ISR (ADC_vect)
{
 884:	1f 92       	push	r1
 886:	0f 92       	push	r0
 888:	0f b6       	in	r0, 0x3f	; 63
 88a:	0f 92       	push	r0
 88c:	11 24       	eor	r1, r1
 88e:	8f 93       	push	r24
 890:	9f 93       	push	r25
	adc_value = ADC;
 892:	80 91 78 00 	lds	r24, 0x0078
 896:	90 91 79 00 	lds	r25, 0x0079
 89a:	90 93 48 01 	sts	0x0148, r25
 89e:	80 93 47 01 	sts	0x0147, r24
}
 8a2:	9f 91       	pop	r25
 8a4:	8f 91       	pop	r24
 8a6:	0f 90       	pop	r0
 8a8:	0f be       	out	0x3f, r0	; 63
 8aa:	0f 90       	pop	r0
 8ac:	1f 90       	pop	r1
 8ae:	18 95       	reti

000008b0 <main>:
	
	
	//DIDR0 |= (1 << ADC0D) | (1 << ADC1D) | (1 << ADC4D) | (1 << ADC5D) | (1 << ADC6D);
	//DIDR2 |= (1 << ADC8D) | (1 << ADC9D) | (1 << ADC10D); 
	
	DDRB |=  (1<<DDB5) | (1<<DDB6) | (1 << DDB7) | (1 << DDB4);         //OCR1A and OCR1B...
 8b0:	84 b1       	in	r24, 0x04	; 4
 8b2:	80 6f       	ori	r24, 0xF0	; 240
 8b4:	84 b9       	out	0x04, r24	; 4
	DDRC |= (1 << DDC7);
 8b6:	3f 9a       	sbi	0x07, 7	; 7
	
	DDRD &= ~(1 << DDD7);
 8b8:	57 98       	cbi	0x0a, 7	; 10
	
	DDRB &= ~(1 << DDB0) & ~(1 << DDB1) & ~(1 << DDB2) & ~(1 << DDB3);
 8ba:	84 b1       	in	r24, 0x04	; 4
 8bc:	80 7f       	andi	r24, 0xF0	; 240
 8be:	84 b9       	out	0x04, r24	; 4
	DDRF &= ~(1 << DDF6) & ~(1 << DDF5) & ~(1 << DDF4);
 8c0:	80 b3       	in	r24, 0x10	; 16
 8c2:	8f 78       	andi	r24, 0x8F	; 143
 8c4:	80 bb       	out	0x10, r24	; 16
	
	
	PORTB &= ~(1 << PORTB0) & ~(1 << PORTB1) & ~(1 << PORTB2) & ~(1 << PORTB3);
 8c6:	85 b1       	in	r24, 0x05	; 5
 8c8:	80 7f       	andi	r24, 0xF0	; 240
 8ca:	85 b9       	out	0x05, r24	; 5
	PORTF &= ~(1 << PORTF4) & ~(1 << PORTF5) & ~(1 << PORTF6) ;
 8cc:	81 b3       	in	r24, 0x11	; 17
 8ce:	8f 78       	andi	r24, 0x8F	; 143
 8d0:	81 bb       	out	0x11, r24	; 17
	PORTD &= ~(1 << PORTD7);
 8d2:	5f 98       	cbi	0x0b, 7	; 11
	
	DDRD |= (1 << DDD0);
 8d4:	50 9a       	sbi	0x0a, 0	; 10
	
	uart_init();                           //USART init
 8d6:	0e 94 c1 01 	call	0x382	; 0x382 <uart_init>
	//ADC_interuptInit();					   //ADC init
	pwm_init();                            //PWM init
 8da:	0e 94 75 01 	call	0x2ea	; 0x2ea <pwm_init>
	
	//
	uart_print("Initialisation finished.");
 8de:	83 e2       	ldi	r24, 0x23	; 35
 8e0:	91 e0       	ldi	r25, 0x01	; 1
 8e2:	0e 94 a0 01 	call	0x340	; 0x340 <uart_print>
	//sei();
	//forward(speed(30));
	
    while(1)
    {
		lineState = CheckSensor();
 8e6:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <CheckSensor>
 8ea:	80 93 49 01 	sts	0x0149, r24
	//	PORTD ^= 0x01; //DD0
		//_delay_ms(300);
		//uart_print_bits(lineState);
		ProcessLineState(lineState);
 8ee:	80 91 49 01 	lds	r24, 0x0149
 8f2:	0e 94 db 01 	call	0x3b6	; 0x3b6 <ProcessLineState>
 8f6:	f7 cf       	rjmp	.-18     	; 0x8e6 <main+0x36>

000008f8 <forward>:
void forward(uint8_t value)
{
	uint8_t tempSpeed = 0;
	int16_t count = 0;
	
	PORTC &= ~(1 << PORTC7);
 8f8:	47 98       	cbi	0x08, 7	; 8
	PORTB &= ~(1 << PORTB7);
 8fa:	2f 98       	cbi	0x05, 7	; 5
	PORTF |= (1 << PORTF7);
 8fc:	8f 9a       	sbi	0x11, 7	; 17
	PORTB |= (1 << PORTB4);
 8fe:	2c 9a       	sbi	0x05, 4	; 5
	OCR1A = value;
 900:	90 e0       	ldi	r25, 0x00	; 0
 902:	90 93 89 00 	sts	0x0089, r25
 906:	80 93 88 00 	sts	0x0088, r24
	OCR1B = value + 5;	
 90a:	05 96       	adiw	r24, 0x05	; 5
 90c:	90 93 8b 00 	sts	0x008B, r25
 910:	80 93 8a 00 	sts	0x008A, r24
 914:	08 95       	ret

00000916 <steer>:
}
void steer(uint8_t value_left, uint8_t value_right)
{
	OCR1A = value_left;
 916:	90 e0       	ldi	r25, 0x00	; 0
 918:	90 93 89 00 	sts	0x0089, r25
 91c:	80 93 88 00 	sts	0x0088, r24
	OCR1B = value_right;
 920:	70 e0       	ldi	r23, 0x00	; 0
 922:	70 93 8b 00 	sts	0x008B, r23
 926:	60 93 8a 00 	sts	0x008A, r22
	
	PORTC &= ~(1 << PORTC7);
 92a:	47 98       	cbi	0x08, 7	; 8
	PORTB &= ~(1 << PORTB7);
 92c:	2f 98       	cbi	0x05, 7	; 5
	PORTF |= (1 << PORTF7);
 92e:	8f 9a       	sbi	0x11, 7	; 17
	PORTB |= (1 << PORTB4);
 930:	2c 9a       	sbi	0x05, 4	; 5
 932:	08 95       	ret

00000934 <__tablejump2__>:
 934:	ee 0f       	add	r30, r30
 936:	ff 1f       	adc	r31, r31

00000938 <__tablejump__>:
 938:	05 90       	lpm	r0, Z+
 93a:	f4 91       	lpm	r31, Z
 93c:	e0 2d       	mov	r30, r0
 93e:	09 94       	ijmp

00000940 <_exit>:
 940:	f8 94       	cli

00000942 <__stop_program>:
 942:	ff cf       	rjmp	.-2      	; 0x942 <__stop_program>
